#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "bignum.h"

pBigInt BigIntAdd(pBigInt num1, pBigInt num2)
{
	pBigInt result;
	result = (pBigInt)malloc(sizeof(BigInt));
	int i, carry;
	int count = 0;
	carry = 0;		//清除进位
	result -> sign = num1 -> sign;		//保存符号
	if(num2->digit > num1->digit){
		pBigInt temp;
		temp = num1;
		num1 = num2;
		num2 = temp;
	}
	//将被加数复制到结果数组中 
	for(i = 0; i < num1->digit; i++){
		result->num[i] = num1->num[i];
		result->digit = num1->digit;
	}
	
	//给num2增加0位
	for(int j = 0;j < num1->digit;j++){
		if(j < num1->digit - num2->digit){
			num1->num[j] = 0;
		}
		else{
			num1->num[j] = num2->num[j];
		}
	}
	
	for(i = num2->digit - 1; i >= num1->digit-num2->digit; i--){
		//将对应位的数和进位数相加
		result->num[i] += num2->num[i] + carry;
		carry = result->num[i] / 10;
		result->num[i] = result->num[i] % 10; 
	}
	while(carry){
		if(i < 0){
			for(int k = result->digit - 1; k >= 0; k--){
				result->num[k + 1] = result->num[k];
			}
			result->num[0] = carry;
			carry = 0;
			result->digit += 1;
		}
		else{
			result->num[i] = result->num[i] + carry;
			carry = result->num[i] / 10;
			result->num[i] = result->num[i] % 10; 
			i -= 1;
		}
	}
	
	return result;
}

void BigIntSub(pBigInt num1, pBigInt num2, pBigInt result){
	
}

void BigIntMul(pBigInt num1, pBigInt num2, pBigInt result){
	
}

void BigIntDiv(pBigInt num1, pBigInt num2, pBigInt result){
	
}
